You are an expert React developer tasked with creating a modern, sleek webpage from a JSON data structure. Please adhere to the following instructions precisely.

CRITICAL REQUIREMENTS:
Code Structure (Single-File Application):
You must write the entire React application within a single file.
Define all UI elements (e.g., navigation bar, accordion, buttons) as individual functional components within this same file.

**Component Rendering:**
* The main `App` component's return statement **must** be wrapped in a single root element, such as a `<div>` or a React Fragment (`<>...</>`), to avoid "Adjacent JSX" errors.

**Data Integrity:**
* You must use the **complete and entire** JSON object provided. Do not omit or alter any top-level keys or their nested data.

  **Data Pre-processing:**
    * Before rendering complex components, you must process flat JSON data into a usable structure. For the accordion, transform the `accordion.data` object into an array of objects, like `[{ heading: 'Is it free?', content: 'Yes...' }, ...]`. Then, iterate over this new array to build the component.

**Library Usage:**
* Do **not** import any external libraries like `react-router-dom`.
* For navigation links, use standard HTML `<a>` tags with `href="#"`.
* The only permitted import is from the `'react'` library itself (e.g., `useState`, `useEffect`, `useRef`).


The main component must be named App, and it must be the only component exported from the file using export default App.
The App component will be responsible for rendering all the other components to create the final page layout. Do not use any imports for local component files.
Data Handling (Strict JSON Usage):

You must use the provided JSON object as the single source for all text content, links, and image sources.
To access content, you must directly reference the properties of the provided JSON object. For example, to get the button's label, the code should access jsonData.button.data.label.
Do not use generic placeholder strings like 'placeholder', '[content goes here]', or reference undefined variables. If the JSON provides the text "Home" for a link, the final code must render the string "Home".

Styling & Responsiveness:
Use Inline Vanilla CSS styling
The design must be responsive and fluid, designed to fill the user's entire browser viewport.
The final webpage must not have a fixed width of 1000px. The JSON position and size attributes should only be used as a guide for relative placement, not for fixed pixel values.
The overall theme color is specified in layout.Theme and the accent color is in layout.Accent. Use these colors throughout the application for backgrounds, buttons, and highlights.

Styling Method: You must use inline vanilla CSS for all styling. All styles must be defined as JavaScript objects and passed to the style attribute of each JSX element. Do not use external CSS files, <style> tags, CSS classes, or any CSS-in-JS libraries.

Layout and Responsiveness:
The design must be fully responsive and fluid, adapting to all screen sizes from mobile to desktop.
For layout, you must use modern CSS like Flexbox (display: 'flex') and Grid (display: 'grid').
Use relative units (%, vw, rem) for widths and font sizes to ensure fluidity. Avoid fixed pixel widths for primary layout containers.

Aesthetics and Theme:
Incorporate the theme (layout.Theme) and accent (layout.Accent) colors from the JSON data for backgrounds, text, and interactive elements.
Create a modern aesthetic by using borderRadius for rounded corners on elements like buttons and containers, and boxShadow for subtle depth and elevation.
Ensure consistent spacing using padding and margin to create a clean, uncluttered design.
Animations and Transitions (CRITICAL for Quality):
You must implement smooth CSS transitions for all interactive elements to provide visual feedback.
Hover Effects: Buttons and links must change smoothly on hover. For example, apply a transition: 'all 0.3s ease-in-out' to the element and change its backgroundColor or transform in a hover state managed by React's useState.
Accordion Animation: The accordion's content reveal must be animated. A recommended technique is to transition the maxHeight property. When an item is closed, its content div should have maxHeight: '0' and overflow: 'hidden'. When opened, it should transition to a maxHeight large enough to contain the content (e.g., '500px').
Modal Animation: The custom modal should fade in smoothly when it appears. This can be achieved by transitioning the opacity from 0 to 1


Component Implementation Details:
NavBar:
It must be a sticky navigation bar that stays at the top of the viewport on scroll.
The logo text on the left side must come from navBar.data.Logo. Style it to be bold and prominent.
The navigation links on the right side must be created from navBar.data.Field1, Field2, Field3, and Field4.

Image/Hero Section:
Check the value of image.data.Hero. If it is true, use the image.data.src as a full-viewport background image for a hero section.
If image.data.Hero is false, render a standard <img> tag using the image.data.src.
* The `src` value for any image provided in the JSON data (e.g., `image.data.src`) will be a unique placeholder ID string, such as `"abc123"`. This is **not** a real image URL or a Base64 string.
* **You MUST use this exact placeholder ID string as the value for the `src` attribute in the React component you generate.**
* For example, if the input JSON is `{ "src": "xyz987" }`, your code must output an element that renders `src="xyz987"`.
* Do not alter, interpret, or try to create a path from this ID. A separate process will use this ID to find and insert the correct image data later.

Button:
Render a button with the text label from button.data.label.
When the button is clicked, it must trigger a custom modal alert, not a native browser alert() function.

navMenu:
Create an interactive horizontal menu with three sections using the text from navMenu.data.Field1, Field2, and Field3.
For "Learn" (Field1) and "Overview" (Field2), include a downward-pointing arrow icon next to the text.
When a user hovers over any of the three sections, a small informational div should appear. For the content of this div, you can use placeholder text like: "More information about [Section Name]".

Accordion:
Create an accordion component. The labels for each tab must come from accordion.data.Heading1, Heading2, and Heading3.
When a user clicks on a heading, its corresponding content (Content1, Content2, or Content3) should be revealed with a smooth dropdown animation.
Here is the JSON data you must use


*note: if the provided JSON does not contain keys for any components, the user DOES NOT want these components generated on the output website at all.